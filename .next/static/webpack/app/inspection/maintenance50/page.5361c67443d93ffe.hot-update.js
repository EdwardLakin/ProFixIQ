"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/inspection/maintenance50/page",{

/***/ "(app-pages-browser)/./src/components/inspection/interpretCommand.ts":
/*!*******************************************************!*\
  !*** ./src/components/inspection/interpretCommand.ts ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ interpretCommand)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(app-pages-browser)/./node_modules/openai/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// src/lib/inspection/interpretCommand.ts\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n});\nasync function interpretCommand(transcript) {\n    var _response_choices__message, _response_choices_;\n    const systemPrompt = '\\nYou are an assistant that converts mechanic speech into structured JSON commands.\\nYour job is to convert the technician\\'s spoken inspection notes into structured commands for a vehicle inspection interface.\\n\\nOnly return a JSON array. No explanation.\\n\\nEach command in the array must look like this:\\n{\\n  \"command\": \"update_status\" | \"update_value\" | \"add_note\" | \"recommend\" | \"complete_item\" | \"skip_item\" | \"complete_inspection\",\\n  \"section\": \"string\",   // Optional: section name like \"Tires\", \"Brakes\", etc.\\n  \"item\": \"string\",      // Optional: item name like \"left front tire\", \"right rear brake pad\", etc.\\n  \"status\": \"ok\" | \"fail\" | \"na\",   // for update_status\\n  \"value\": \"string\",                // for update_value\\n  \"notes\": \"string\"                 // for add_note or recommend\\n}\\n\\nIf multiple items are spoken in one sentence, return multiple command objects in a JSON array.\\nDo not include explanation or text outside of JSON array.\\n';\n    const response = await openai.chat.completions.create({\n        model: 'gpt-4',\n        temperature: 0.2,\n        messages: [\n            {\n                role: 'system',\n                content: systemPrompt\n            },\n            {\n                role: 'user',\n                content: transcript\n            }\n        ],\n        response_format: 'json'\n    });\n    const content = (_response_choices_ = response.choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : _response_choices__message.content;\n    try {\n        const parsed = JSON.parse(content !== null && content !== void 0 ? content : '[]');\n        return Array.isArray(parsed) ? parsed : [];\n    } catch (e) {\n        console.error('Failed to parse AI command JSON:', content);\n        return [];\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2luc3BlY3Rpb24vaW50ZXJwcmV0Q29tbWFuZC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx5Q0FBeUM7QUFHVDtBQUVoQyxNQUFNQyxTQUFTLElBQUlELDBDQUFNQSxDQUFDO0lBQ3hCRSxRQUFRQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLGNBQWM7SUFDbENDLHlCQUF5QjtBQUMzQjtBQUVlLGVBQWVDLGlCQUFpQkMsVUFBa0I7UUErQi9DQyw0QkFBQUE7SUE5QmhCLE1BQU1DLGVBQWdCO0lBb0J0QixNQUFNRCxXQUFXLE1BQU1SLE9BQU9VLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxNQUFNLENBQUM7UUFDcERDLE9BQU87UUFDUEMsYUFBYTtRQUNiQyxVQUFVO1lBQ1I7Z0JBQUVDLE1BQU07Z0JBQVVDLFNBQVNSO1lBQWE7WUFDeEM7Z0JBQUVPLE1BQU07Z0JBQVFDLFNBQVNWO1lBQVc7U0FDckM7UUFDRFcsaUJBQWlCO0lBQ25CO0lBRUEsTUFBTUQsV0FBVVQscUJBQUFBLFNBQVNXLE9BQU8sQ0FBQyxFQUFFLGNBQW5CWCwwQ0FBQUEsNkJBQUFBLG1CQUFxQlksT0FBTyxjQUE1QlosaURBQUFBLDJCQUE4QlMsT0FBTztJQUVyRCxJQUFJO1FBQ0YsTUFBTUksU0FBU0MsS0FBS0MsS0FBSyxDQUFDTixvQkFBQUEscUJBQUFBLFVBQVc7UUFDckMsT0FBT08sTUFBTUMsT0FBTyxDQUFDSixVQUFVQSxTQUFTLEVBQUU7SUFDNUMsRUFBRSxPQUFPSyxHQUFHO1FBQ1ZDLFFBQVFDLEtBQUssQ0FBQyxvQ0FBb0NYO1FBQ2xELE9BQU8sRUFBRTtJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL1Byb0ZpeElRL3NyYy9jb21wb25lbnRzL2luc3BlY3Rpb24vaW50ZXJwcmV0Q29tbWFuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL2luc3BlY3Rpb24vaW50ZXJwcmV0Q29tbWFuZC50c1xuXG5pbXBvcnQgeyBQYXJzZWRDb21tYW5kIH0gZnJvbSAnQGxpYi90eXBlcyc7XG5pbXBvcnQgeyBPcGVuQUkgfSBmcm9tICdvcGVuYWknO1xuXG5jb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHtcbiAgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbiAgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI6IHRydWUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaW50ZXJwcmV0Q29tbWFuZCh0cmFuc2NyaXB0OiBzdHJpbmcpOiBQcm9taXNlPFBhcnNlZENvbW1hbmRbXT4ge1xuICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBgXG5Zb3UgYXJlIGFuIGFzc2lzdGFudCB0aGF0IGNvbnZlcnRzIG1lY2hhbmljIHNwZWVjaCBpbnRvIHN0cnVjdHVyZWQgSlNPTiBjb21tYW5kcy5cbllvdXIgam9iIGlzIHRvIGNvbnZlcnQgdGhlIHRlY2huaWNpYW4ncyBzcG9rZW4gaW5zcGVjdGlvbiBub3RlcyBpbnRvIHN0cnVjdHVyZWQgY29tbWFuZHMgZm9yIGEgdmVoaWNsZSBpbnNwZWN0aW9uIGludGVyZmFjZS5cblxuT25seSByZXR1cm4gYSBKU09OIGFycmF5LiBObyBleHBsYW5hdGlvbi5cblxuRWFjaCBjb21tYW5kIGluIHRoZSBhcnJheSBtdXN0IGxvb2sgbGlrZSB0aGlzOlxue1xuICBcImNvbW1hbmRcIjogXCJ1cGRhdGVfc3RhdHVzXCIgfCBcInVwZGF0ZV92YWx1ZVwiIHwgXCJhZGRfbm90ZVwiIHwgXCJyZWNvbW1lbmRcIiB8IFwiY29tcGxldGVfaXRlbVwiIHwgXCJza2lwX2l0ZW1cIiB8IFwiY29tcGxldGVfaW5zcGVjdGlvblwiLFxuICBcInNlY3Rpb25cIjogXCJzdHJpbmdcIiwgICAvLyBPcHRpb25hbDogc2VjdGlvbiBuYW1lIGxpa2UgXCJUaXJlc1wiLCBcIkJyYWtlc1wiLCBldGMuXG4gIFwiaXRlbVwiOiBcInN0cmluZ1wiLCAgICAgIC8vIE9wdGlvbmFsOiBpdGVtIG5hbWUgbGlrZSBcImxlZnQgZnJvbnQgdGlyZVwiLCBcInJpZ2h0IHJlYXIgYnJha2UgcGFkXCIsIGV0Yy5cbiAgXCJzdGF0dXNcIjogXCJva1wiIHwgXCJmYWlsXCIgfCBcIm5hXCIsICAgLy8gZm9yIHVwZGF0ZV9zdGF0dXNcbiAgXCJ2YWx1ZVwiOiBcInN0cmluZ1wiLCAgICAgICAgICAgICAgICAvLyBmb3IgdXBkYXRlX3ZhbHVlXG4gIFwibm90ZXNcIjogXCJzdHJpbmdcIiAgICAgICAgICAgICAgICAgLy8gZm9yIGFkZF9ub3RlIG9yIHJlY29tbWVuZFxufVxuXG5JZiBtdWx0aXBsZSBpdGVtcyBhcmUgc3Bva2VuIGluIG9uZSBzZW50ZW5jZSwgcmV0dXJuIG11bHRpcGxlIGNvbW1hbmQgb2JqZWN0cyBpbiBhIEpTT04gYXJyYXkuXG5EbyBub3QgaW5jbHVkZSBleHBsYW5hdGlvbiBvciB0ZXh0IG91dHNpZGUgb2YgSlNPTiBhcnJheS5cbmA7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgIG1vZGVsOiAnZ3B0LTQnLFxuICAgIHRlbXBlcmF0dXJlOiAwLjIsXG4gICAgbWVzc2FnZXM6IFtcbiAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IHN5c3RlbVByb21wdCB9LFxuICAgICAgeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHRyYW5zY3JpcHQgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlX2Zvcm1hdDogJ2pzb24nLFxuICB9KTtcblxuICBjb25zdCBjb250ZW50ID0gcmVzcG9uc2UuY2hvaWNlc1swXT8ubWVzc2FnZT8uY29udGVudDtcblxuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoY29udGVudCA/PyAnW10nKTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXJzZWQpID8gcGFyc2VkIDogW107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgQUkgY29tbWFuZCBKU09OOicsIGNvbnRlbnQpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufSJdLCJuYW1lcyI6WyJPcGVuQUkiLCJvcGVuYWkiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJkYW5nZXJvdXNseUFsbG93QnJvd3NlciIsImludGVycHJldENvbW1hbmQiLCJ0cmFuc2NyaXB0IiwicmVzcG9uc2UiLCJzeXN0ZW1Qcm9tcHQiLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJtb2RlbCIsInRlbXBlcmF0dXJlIiwibWVzc2FnZXMiLCJyb2xlIiwiY29udGVudCIsInJlc3BvbnNlX2Zvcm1hdCIsImNob2ljZXMiLCJtZXNzYWdlIiwicGFyc2VkIiwiSlNPTiIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5IiwiZSIsImNvbnNvbGUiLCJlcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/inspection/interpretCommand.ts\n"));

/***/ })

});